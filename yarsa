#!/bin/bash
#
# Yet Another RSync bAckup (by date)
# Copyright (C) 2013 Enrico Rossi
#
#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#                    Version 2, December 2004
#
# Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>
#
# Everyone is permitted to copy and distribute verbatim or modified
# copies of this license document, and changing it is allowed as long
# as the name is changed.
#
#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
#
#  0. You just DO WHAT THE FUCK YOU WANT TO.

set -e

# Default configuration
# todo: link to the git describe --tags
VERSION="1.0"
PATH=/bin:/usr/bin:/sbin:/usr/sbin

# Complete path to backup server in the form of
# server::modulo
BACKUP_FROM=$1

# Dir where to store the incremental backups
# ex. /backup/myserver.com/
BACKUP_TO=$2

# Number of backups to keep
KEEP_DIR_NO=$3

# Local Config file
CONFFILE=$BACKUP_TO/yarsa.cfg

# The exclude file, lists of all file not to be backed UP
EXCLUDE_FILE=$BACKUP_TO/yarsa_exclude.cfg

# The rsync command to use.
RSYNC_SWITCH="-av --delete --delete-excluded --ignore-errors --whole-file --numeric-ids --exclude-from=$EXCLUDE_FILE"

# Read the local conffile
if [ -r "$CONFFILE" ]; then
    . $CONFFILE
fi

# Perform some safety checks before starting the backup.
function do_checks() {
# Number of backups > 0
echo -n "Check bck number ... ["

if [ $KEEP_DIR_NO -gt 0 ]; then
    echo "OK]"
else
    echo "FAILED]"
    echo "... missing number of backups to keep."
    exit 1
fi

# Check the destination directory for safe
echo -n "Check dirs ... ["

if [ -d "$BACKUP_TO" ] && [ -d "$LINK_DIR" ] && [ ! -e $NEW_BCK_DIR ]; then
    echo "OK]"
else
    echo "FAILED]"
    echo "... missing $BACKUP_TO or $LINK_DIR, $NEW_BCK_DIR"
    echo "... OR $LINK_DIR is the same of $NEW_BCK_DIR, wait 1 minute."
    exit 1
fi

# Check for the config file in backups directory
echo -n "Check config file: $CONFFILE ... ["

if [ -f "$CONFFILE" ]; then
    echo "OK]"
else
    echo "FAILED]"
    echo "... missing $CONFFILE"
    exit 1
fi

# Check for the exclude file in backups directory if defined.
if [ -v EXCLUDE_FILE ]; then
    echo -n "Check exclude file: $EXCLUDE_FILE ... ["

    if [ -f "$EXCLUDE_FILE" ]; then
        echo "OK]"
    else
        echo "FAILED]"
        echo "... missing $EXCLUDE_FILE"
        exit 1
    fi
fi
}

# List all backup's directory found.
function list_backup_dir() {
echo "backup directory found: $BCK_NO"

for i in $BCK_LIST; do
    echo "... " $i
done
}

# List the backup's directory to be removed.
function list_rm_dir() {
echo "directory to remove: $RM_NO"

for i in $RM_LIST; do
    echo "... " $i
done
}

function remove_old_backups() {
for i in $RM_LIST; do
    echo -n "Removing ... $i ... ["

    if [ -d $i ]; then
        rm -rf $i
        echo "OK]"
    else
        echo "FAILED]"
        exit 2
    fi
done
}

function link_new_dir() {
echo -n "Hard linking $NEW_BCK_DIR to $LINK_DIR ... ["

if [ -d $LINK_DIR ]; then
    cp -al $LINK_DIR $NEW_BCK_DIR
    echo "OK]"
else
    echo "FAILED]"
    exit 3
fi
}

## Main
# Actual number of backups directory
BCK_NO=$(find $BACKUP_TO -maxdepth 1 -type d -name "rsb_*" | wc -l)
BCK_LIST=$(find $BACKUP_TO -maxdepth 1 -type d -name "rsb_*" | sort)

# Directory to remove
RM_NO=$(($BCK_NO - $KEEP_DIR_NO))

if [ $RM_NO -gt 0 ]; then
    # Create a list of dir to remove like:
    RM_LIST=$(find $BACKUP_TO -maxdepth 1 -type d -name "rsb_*"|sort|head -$RM_NO)
fi

# The most recent backups
LINK_DIR=$(find $BACKUP_TO -maxdepth 1 -type d -name "rsb_*"|sort|tail -1)

# The new backups to create
NEW_BCK_DIR=$BACKUP_TO/rsb_$(date +%y%m%d%H%M)

# first log the status
echo "yarsa backup $VERSION"
echo "----------------"
echo
echo "backup start at $(date)"
echo "From: $BACKUP_FROM"
echo "to: $BACKUP_TO"
echo "keep: $KEEP_DIR_NO"
list_backup_dir
echo
list_rm_dir
echo
echo "-- df -m --"
df -m
echo
do_checks

# 1st erasing the oldest dir
remove_old_backups

# hard link the first one
link_new_dir

# and execute the sync
echo
echo "rsync $RSYNC_SWITCH $BACKUP_FROM $NEW_BCK_DIR/ 2>&1"
echo
rsync $RSYNC_SWITCH $BACKUP_FROM $NEW_BCK_DIR/ 2>&1
echo
echo Completed
echo
echo "-- df -m --"
df -m
echo
echo "yarsa backup end at $(date)"
exit 0

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
