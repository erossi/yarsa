#!/bin/sh
#
# Yet Another RSync bAckup (yarsa)
# Copyright (C) 2013 Enrico Rossi
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This package is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

set -e

VERSION="devel"
PATH=$PATH:/sbin:/bin:/usr/sbin:/usr/bin
DATUM=$(date +%y%m%d%H%M)
RSYNC_SWITCH="-av --delete --delete-excluded --ignore-errors --whole-file --numeric-ids"

logit()
{
    if [ $log ]; then
        echo "${*}" >> $logfile
    else
        echo "${*}"
    fi
    }

# Check if the number of backups (-c param) > 0
check_cycle()
{
    if [ $count -gt 0 ]; then
        logit "Keep old backup: $count"
    else
        echo " Error, wrong -c param: $count" >&2
        exit 1
    fi
}

# Check the destination directory.
check_dest()
{
    if [ -d "$dest" ]; then
        logit "Backup to: $dest"
    else
        echo "Error Dest: $dest not found." >&2
        exit 1
    fi
}

# Check the source directory.
check_source()
{
    if [ -d "$source" ]; then
        logit "Source: $source"
    else
        echo "Error -s param: $source not found." >&2
        exit 1
    fi
}

# Check if the last directory to be linked exists.
check_lastlink()
{
    if [ -d "$last_to_link" ]; then
        logit "Last backup to be linked: $last_to_link"
    else
        echo "Error last bck: $last_to_link not found." >&2
        exit 1
    fi
}

# Check if the new backup does not already exists.
check_newlink()
{
    if [ ! -e $new_to_link ]; then
        logit "New backup: $new_to_link"
    else
        echo "Error new bck: $new_to_link already exists!." >&2
        exit 1
    fi
}

# Perform safety checks before starting the backup.
do_checks()
{
    # Why check the source???
#    if [ ! $rotateonly ]; then
#        check_source
#    fi

    check_dest
    check_cycle
    check_lastlink
    check_newlink
}

# List all backup's directory found.
list_backup_dir()
{
    logit "backup directory found: $backup_number"

    for i in $backup_list; do
        logit " " $i
    done
}

# List the backup's directory to be removed.
list_rm_dir()
{
    logit "directory to remove: $remove_number"

    for i in $remove_list; do
        logit " " $i
    done
}

remove_old_backups()
{
    for i in $remove_list; do
        if [ -d $i ]; then
            output="Removing $i"
            rm -rf $i

            if [ -f $i.log ]; then
                output="$output[.log]"
                rm $i.log
            fi

            logit $output
        else
            echo "Error, failed to remove $i" >&2
            exit 2
        fi
    done
}

link_new_dir()
{
    if [ -d $last_to_link ]; then
        logit "Linking $new_to_link to $last_to_link"
        cp -al $last_to_link $new_to_link
    else
        echo "Error, failed to link new_to_link to $last_to_link" >&2
        exit 3
    fi
}

# Echo the df -m
dodf()
{
    logit "\n"

    if [ $dodf ]; then
        if [ $log ]; then
            df -m >> $logfile
        else
            df -m
        fi
    fi
}

# execute the sync
do_backup()
{
    # add the exclude/include files if present.
    if [ -f $excludefile ]; then
        RSYNC_SWITCH="$RSYNC_SWITCH --exclude-from=$excludefile"
    fi

    if [ -f $includefile ]; then
        RSYNC_SWITCH="$RSYNC_SWITCH --include-from=$includefile"
    fi

    if [ $log ]; then
        echo "\nrsync $RSYNC_SWITCH $source $new_to_link/ 2>&1" >> $logfile
        rsync $RSYNC_SWITCH $source $new_to_link/ 2>&1 >> $logfile
        echo >> $logfile
        echo " * Completed *" >> $logfile
    else
        echo "\nrsync $RSYNC_SWITCH $source $new_to_link/ 2>&1"
        rsync $RSYNC_SWITCH $source $new_to_link/ 2>&1
        echo "\n * Completed *"
    fi
}

# Help message
usage()
{
    echo "Usage: $prog [-h] [-c cycle] [-d date] [-f] [-l] [-r] [-s SRC] [-t] DEST"
    echo " or    $prog [-R] [-c cycle] [-f] [-t]"
    echo
    echo "Options"
    echo " -c cycle - save cycle versions (default: 7)"
    echo " -d date  - link to the date instead of the current time"
    echo " -f       - log df space before and after"
    echo " -l       - create log files"
    echo " -r       - just roll, don't sync"
    echo " -R       - assume rsyncd remote call"
    echo " -s src   - source directory"
    echo " -t       - create backup directory"
    echo " -h       - this help"
}

## Main
# parse args
prog=$(basename $0)
count=7
dodf=
log=
logfile=
remote=
rolldate=
rotateonly=
createdir=

while getopts c:dflr:Rs:th opt; do
    case "$opt" in
        c) count="$OPTARG"
            ;;
        d) rolldate="$OPTARG"
            ;;
        f) dodf=1
            ;;
        l) log=1
            ;;
        r) rotateonly=1
            ;;
        R) remote=1
            ;;
        s) source="$OPTARG"
            ;;
        t) createdir=1
            echo "- touch not implemented -"
            exit 1
            ;;
        h) usage
            exit 0
            ;;
        *) usage
            exit 1
            ;;
    esac
done

shift $(($OPTIND - 1))

if [ $remote ]; then
    dest=$RSYNC_MODULE_PATH
    rotateonly=1
    rolldate=$(basename $RSYNC_REQUEST)
    source="* REMOTE *"
    log=1
    #echo $RSYNC_MODULE_NAME
    #echo $RSYNC_HOST_ADDR
    #echo $RSYNC_HOST_NAME
    #echo $RSYNC_USER_NAME
    #echo $RSYNC_PID
    #echo $RSYNC_ARG#
elif [ $# -eq 0 ] || [ $# -gt 1 ]; then
    usage
    exit 1
else
    dest=$1
    # Non valid in remote
    excludefile=$dest/yarsa.exclude
    includefile=$dest/yarsa.include
fi

configfile=$dest/yarsa.cfg

# Read the local conffile
if [ -r "$configfile" ]; then
    . $configfile
else
    echo "Yarsa missing config file: $configfile" >&2
    exit 1
fi

backup_number=$(find $dest -maxdepth 1 -type d -name "rsb_*" | wc -l)
backup_list=$(find $dest -maxdepth 1 -type d -name "rsb_*" | sort)

# Number of directory to remove
remove_number=$(($backup_number - $count))

# list of dir to remove
if [ $remove_number -gt 0 ]; then
    remove_list=$(find $dest -maxdepth 1 -type d -name "rsb_*"|sort|head -$remove_number)
fi

# If remove_number < 0 then make it 0.
if [ $remove_number -lt 0 ]; then
    remove_number=0
fi

# The most recent backups
last_to_link=$(find $dest -maxdepth 1 -type d -name "rsb_*"|sort|tail -1)

# The new backups to create
if [ $rolldate ]; then
    new_to_link=$dest/$rolldate
else
    new_to_link=$dest/rsb_$DATUM
fi

# Set the logfile name
logfile="$new_to_link.log"

# first log the status
logit "Yarsa backup system ($VERSION)"
logit "\nstart at $(date)"

do_checks
list_backup_dir
list_rm_dir
dodf
remove_old_backups
link_new_dir

if [ ! $rotateonly ]; then
    do_backup
else
    logit "Rotate only active, skipping backup."
fi

dodf
logit "\nend at $(date)"

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
