#!/bin/sh
#
# Yet Another RSync bAckup (by date)
# Copyright (C) 2013 Enrico Rossi
#
#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#                    Version 2, December 2004
#
# Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>
#
# Everyone is permitted to copy and distribute verbatim or modified
# copies of this license document, and changing it is allowed as long
# as the name is changed.
#
#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
#
#  0. You just DO WHAT THE FUCK YOU WANT TO.

set -e

# Default configuration
# todo: link to the git describe --tags
VERSION="1.0"
PATH=$PATH:/sbin:/bin:/usr/sbin:/usr/bin
DATUM=$(date +%y%m%d%H%M)
RSYNC_SWITCH="-av --delete --delete-excluded --ignore-errors --whole-file --numeric-ids"

# Number of backups > 0
check_cycle()
{
    echo -n " cycle ... ["

    if [ $count -gt 0 ]; then
        echo "OK]"
    else
        echo -n "FAILED] "
        echo "wrong cycle number"
        exit 1
    fi
}

# Check the destination directory
check_dest()
{
    echo -n " destination dir ... ["

    if [ -d "$dest" ]; then
        echo "OK]"
    else
        echo -n "FAILED] "
        echo "missing $dest"
        exit 1
    fi
}

# check the source directory
check_source()
{
    echo -n " source dir ... ["

    if [ -d "$source" ]; then
        echo "OK]"
    else
        echo -n "FAILED] "
        echo "missing $source"
        exit 1
    fi
}

# Check the last directory to link
check_lastlink()
{
    echo -n " last dir to be linked ... ["

    if [ -d "$last_to_link" ]; then
        echo "OK]"
    else
        echo -n "FAILED] "
        echo "missing $last_to_link"
        exit 1
    fi
}

# Check the new backup does not exists
check_newlink()
{
    echo -n " new backup dir ... ["

    if [ ! -e $new_to_link ]; then
        echo "OK]"
    else
        echo -n "FAILED] "
        echo "$last_to_link already exists!."
        exit 1
    fi
}

# Check the config file
check_config()
{
    # Check for the config file in backups directory
    echo -n " config file: $configfile ... ["

    if [ -f "$configfile" ]; then
        echo "OK]"
    else
        echo -n "FAILED] "
        echo "missing $configfile"
        exit 1
    fi
}

# Perform some safety checks before starting the backup.
do_checks()
{
    echo "Safety checks:"

    if [ ! $rotateonly ]; then
        check_source
    fi

    check_dest
    check_config
    check_cycle
    check_lastlink
    check_newlink
}

# List all backup's directory found.
list_backup_dir()
{
    echo "backup directory found: $backup_number"

    for i in $backup_list; do
        echo "... " $i
    done
}

# List the backup's directory to be removed.
list_rm_dir()
{
    echo "directory to remove: $remove_number"

    for i in $remove_list; do
        echo "... " $i
    done
}

remove_old_backups()
{
    for i in $remove_list; do
        echo -n "Removing ... $i ... ["

        if [ -d $i ]; then
            rm -rf $i
            echo "OK]"
        else
            echo "FAILED]"
            exit 2
        fi
    done
}

link_new_dir()
{
    echo -n "Hard linking $new_to_link to $last_to_link ... ["

    if [ -d $last_to_link ]; then
        cp -al $last_to_link $new_to_link
        echo "OK]"
    else
        echo "FAILED]"
        exit 3
    fi
}

# Echo the df -m
dodf()
{
    if [ $dodf ]; then
        echo
        echo "-- df -m --"
        df -m
    fi
}

# execute the sync
do_backup()
{
    # add the exclude/include files if present.
    if [ -f $excludefile ]; then
        RSYNC_SWITCH="$RSYNC_SWITCH --exclude-from=$excludefile"
    fi

    if [ -f $includefile ]; then
        RSYNC_SWITCH="$RSYNC_SWITCH --include-from=$includefile"
    fi

    echo "rsync $RSYNC_SWITCH $source $new_to_link/ 2>&1"
    echo
    rsync $RSYNC_SWITCH $source $new_to_link/ 2>&1
    echo
    echo " * Completed *"
}

# Help message
usage()
{
    echo "Usage: $prog [-h] [-c cycle] [-l] [-r dir] [-R] [-s source dir] [-t] <backup dir>"
    echo "      -c cycle - save cycle versions (default: 7)"
    echo "      -l       - create log files"
    echo "      -r date  - link to the date instead of the current time"
    echo "      -R       - assume remote, just roll"
    echo "      -s src   - source directory"
    echo "      -t       - create backup directory"
    echo "      -h       - this help"
}

## Main
# parse args
prog=$(basename $0)
count=7
dodf=
log=
rolldate=
rotateonly=
touch=

while getopts c:dlr:Rs:th opt; do
    case "$opt" in
        c) count="$OPTARG"
            ;;
        d) dodf=1
            ;;
        l) log=1
            ;;
        r) rolldate="$OPTARG"
            ;;
        R) rotateonly=1
            ;;
        s) source="$OPTARG"
            ;;
        t) touch=1
            echo "- touch not implemented -"
            exit 1
            ;;
        h) usage
            exit 0
            ;;
        *) usage
            exit 1
            ;;
    esac
done

shift $(($OPTIND - 1))

if [ $# -eq 0 ]; then
    usage
    exit 1
fi

dest=$1
configfile=$dest/yarsa.cfg
excludefile=$dest/yarsa.exclude
includefile=$dest/yarsa.include
backup_number=$(find $dest -maxdepth 1 -type d -name "rsb_*" | wc -l)
backup_list=$(find $dest -maxdepth 1 -type d -name "rsb_*" | sort)

# Read the local conffile
if [ -r "$configfile" ]; then
    . $configfile
fi

# Directory to remove
remove_number=$(($backup_number - $count))

# Create a list of dir to remove like:
if [ $remove_number -gt 0 ]; then
    remove_list=$(find $dest -maxdepth 1 -type d -name "rsb_*"|sort|head -$remove_number)
fi

# The most recent backups
last_to_link=$(find $dest -maxdepth 1 -type d -name "rsb_*"|sort|tail -1)

# The new backups to create
new_to_link=$dest/rsb_$DATUM

# first log the status
echo " - yarsa backup system ($VERSION) -"
echo
echo "start at $(date)"
echo "from: $source"
echo "to: $dest"
echo "keep: $count"
list_backup_dir
list_rm_dir
dodf
do_checks
remove_old_backups
link_new_dir
echo

if [ ! $rotateonly ]; then
    do_backup
else
    echo "Rotate only active, skipping backup."
fi

dodf
echo
echo "end at $(date)"

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
